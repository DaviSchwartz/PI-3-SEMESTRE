# Generated by Django 5.2.1 on 2025-05-11 14:20

import datetime
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EmpresaParceira',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome completo da empresa parceira', max_length=100, verbose_name='Nome da Empresa')),
                ('cnpj', models.CharField(blank=True, max_length=18, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='CNPJ deve estar no formato: 99.999.999/9999-99', regex='^\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}$')], verbose_name='CNPJ')),
                ('telefone', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message="Telefone deve estar no formato: '+999999999'", regex='^\\+?1?\\d{9,15}$')], verbose_name='Telefone')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='E-mail')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativa')),
            ],
            options={
                'verbose_name': 'Empresa Parceira',
                'verbose_name_plural': 'Empresas Parceiras',
                'ordering': ['nome'],
                'indexes': [models.Index(fields=['nome'], name='Sistema_emp_nome_c9e94c_idx'), models.Index(fields=['cnpj'], name='Sistema_emp_cnpj_0683c5_idx')],
            },
        ),
        migrations.CreateModel(
            name='Obra',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome da Obra')),
                ('endereco', models.TextField(verbose_name='Endereço Completo')),
                ('data_inicio', models.DateField(verbose_name='Data de Início')),
                ('data_prevista_termino', models.DateField(blank=True, null=True, verbose_name='Previsão de Término')),
                ('data_real_termino', models.DateField(blank=True, null=True, verbose_name='Data Real de Término')),
                ('status', models.CharField(choices=[('PLANEJAMENTO', 'Planejamento'), ('ANDAMENTO', 'Em Andamento'), ('PARADA', 'Parada'), ('CONCLUIDA', 'Concluída'), ('CANCELADA', 'Cancelada')], default='PLANEJAMENTO', max_length=12, verbose_name='Status da Obra')),
                ('descricao', models.TextField(blank=True, verbose_name='Descrição')),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='obras', to='Sistema.empresaparceira', verbose_name='Empresa Responsável')),
            ],
            options={
                'verbose_name': 'Obra',
                'verbose_name_plural': 'Obras',
                'ordering': ['-data_inicio'],
                'permissions': [('view_obra_report', 'Pode visualizar relatórios de obra')],
            },
        ),
        migrations.CreateModel(
            name='Colaborador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome Completo')),
                ('cpf', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message='CPF deve estar no formato: 999.999.999-99', regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')], verbose_name='CPF')),
                ('rg', models.CharField(blank=True, max_length=20, verbose_name='RG')),
                ('data_nascimento', models.DateField(verbose_name='Data de Nascimento')),
                ('sexo', models.CharField(choices=[('M', 'Masculino'), ('F', 'Feminino'), ('O', 'Outro'), ('N', 'Prefiro não informar')], max_length=1, verbose_name='Sexo')),
                ('estado_civil', models.CharField(blank=True, choices=[('SOLTEIRO', 'Solteiro(a)'), ('CASADO', 'Casado(a)'), ('DIVORCIADO', 'Divorciado(a)'), ('VIUVO', 'Viúvo(a)'), ('SEPARADO', 'Separado(a)')], max_length=10, verbose_name='Estado Civil')),
                ('telefone', models.CharField(max_length=15, verbose_name='Telefone')),
                ('telefone_emergencia', models.CharField(blank=True, max_length=15, verbose_name='Telefone de Emergência')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='E-mail')),
                ('cep', models.CharField(max_length=9, verbose_name='CEP')),
                ('logradouro', models.CharField(max_length=100, verbose_name='Logradouro')),
                ('numero', models.CharField(max_length=10, verbose_name='Número')),
                ('complemento', models.CharField(blank=True, max_length=50, verbose_name='Complemento')),
                ('bairro', models.CharField(max_length=50, verbose_name='Bairro')),
                ('cidade', models.CharField(max_length=50, verbose_name='Cidade')),
                ('estado', models.CharField(max_length=2, verbose_name='Estado')),
                ('funcao', models.CharField(max_length=100, verbose_name='Função/Cargo')),
                ('salario', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Salário')),
                ('data_admissao', models.DateField(default=datetime.date.today, verbose_name='Data de Admissão')),
                ('data_demissao', models.DateField(blank=True, null=True, verbose_name='Data de Demissão')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('foto', models.ImageField(blank=True, null=True, upload_to='colaboradores/', verbose_name='Foto')),
                ('observacoes', models.TextField(blank=True, verbose_name='Observações')),
                ('obra', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='colaboradores', to='Sistema.obra', verbose_name='Obra Vinculada')),
            ],
            options={
                'verbose_name': 'Colaborador',
                'verbose_name_plural': 'Colaboradores',
                'ordering': ['nome'],
                'permissions': [('view_colaborador_report', 'Pode visualizar relatórios de colaboradores')],
            },
        ),
        migrations.CreateModel(
            name='RelatorioMensal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mes_referencia', models.CharField(help_text='Formato: AAAA-MM', max_length=7, verbose_name='Mês de Referência')),
                ('total_refeicoes', models.IntegerField(verbose_name='Total de Refeições')),
                ('valor_total', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Valor Total')),
                ('cafe_manha', models.IntegerField(default=0, verbose_name='Cafés da Manhã')),
                ('almocos', models.IntegerField(default=0, verbose_name='Almoços')),
                ('jantares', models.IntegerField(default=0, verbose_name='Jantares')),
                ('lanches', models.IntegerField(default=0, verbose_name='Lanches')),
                ('data_geracao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Geração')),
                ('observacoes', models.TextField(blank=True, verbose_name='Observações')),
                ('colaborador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relatorios', to='Sistema.colaborador', verbose_name='Colaborador')),
            ],
            options={
                'verbose_name': 'Relatório Mensal',
                'verbose_name_plural': 'Relatórios Mensais',
                'ordering': ['-mes_referencia'],
            },
        ),
        migrations.CreateModel(
            name='Restaurante',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome do Restaurante')),
                ('cnpj', models.CharField(max_length=18, unique=True, verbose_name='CNPJ')),
                ('endereco', models.TextField(verbose_name='Endereço Completo')),
                ('telefone', models.CharField(max_length=15, verbose_name='Telefone')),
                ('responsavel', models.CharField(max_length=100, verbose_name='Responsável')),
                ('capacidade', models.IntegerField(verbose_name='Capacidade de Atendimento')),
                ('avaliacao', models.DecimalField(decimal_places=1, default=3.0, max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Avaliação')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_cadastro', models.DateField(auto_now_add=True, verbose_name='Data de Cadastro')),
            ],
            options={
                'verbose_name': 'Restaurante',
                'verbose_name_plural': 'Restaurantes',
                'ordering': ['nome'],
                'constraints': [models.CheckConstraint(condition=models.Q(('avaliacao__gte', 0), ('avaliacao__lte', 5)), name='avaliacao_entre_0_e_5')],
            },
        ),
        migrations.CreateModel(
            name='Refeicao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField(auto_now_add=True, verbose_name='Data')),
                ('horario', models.TimeField(auto_now_add=True, verbose_name='Horário')),
                ('tipo', models.CharField(choices=[('CAFE', 'Café da Manhã'), ('ALMOCO', 'Almoço'), ('JANTA', 'Jantar'), ('LANCHE', 'Lanche')], max_length=6, verbose_name='Tipo de Refeição')),
                ('valor', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Valor da Refeição')),
                ('satisfacao', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Satisfação (1-5)')),
                ('observacoes', models.TextField(blank=True, verbose_name='Observações')),
                ('colaborador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refeicoes', to='Sistema.colaborador', verbose_name='Colaborador')),
                ('restaurante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refeicoes', to='Sistema.restaurante', verbose_name='Restaurante')),
            ],
            options={
                'verbose_name': 'Refeição',
                'verbose_name_plural': 'Refeições',
                'ordering': ['-data', '-horario'],
            },
        ),
        migrations.AddIndex(
            model_name='colaborador',
            index=models.Index(fields=['nome'], name='Sistema_col_nome_9471af_idx'),
        ),
        migrations.AddIndex(
            model_name='colaborador',
            index=models.Index(fields=['cpf'], name='Sistema_col_cpf_17db7a_idx'),
        ),
        migrations.AddIndex(
            model_name='colaborador',
            index=models.Index(fields=['funcao'], name='Sistema_col_funcao_e9dd04_idx'),
        ),
        migrations.AddIndex(
            model_name='colaborador',
            index=models.Index(fields=['ativo'], name='Sistema_col_ativo_1317ed_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='relatoriomensal',
            unique_together={('colaborador', 'mes_referencia')},
        ),
        migrations.AddConstraint(
            model_name='refeicao',
            constraint=models.CheckConstraint(condition=models.Q(('satisfacao__gte', 1), ('satisfacao__lte', 5)), name='satisfacao_entre_1_e_5'),
        ),
        migrations.AlterUniqueTogether(
            name='refeicao',
            unique_together={('colaborador', 'data', 'tipo')},
        ),
    ]
